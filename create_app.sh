#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_POSITIONAL_SINGLE([zoom-link],[Link of the zoom room you want to join e.g: "https://us02web.zoom.us/j/<MEETINGID>?pwd=<PWD>" ],[])
# ARG_OPTIONAL_SINGLE([png-path],[p],[path to png file that will be used as an icon],[icon.png])
# ARG_HELP([Compile an executable MacOS 'App' to open a zoom room directly ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_png_path="icon.png"


print_help()
{
	printf '%s\n' "Compile an executable MacOS 'App' to open a zoom room directly "
	printf 'Usage: %s [-p|--png-path <arg>] [-h|--help] <zoom-link>\n' "$0"
	printf '\t%s\n' "<zoom-link>: Link of the zoom room you want to join e.g: \"https://us02web.zoom.us/j/<MEETINGID>?pwd=<PWD>\" "
	printf '\t%s\n' "-p, --png-path: path to png file that will be used as an icon (default: 'icon.png')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-p|--png-path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_png_path="$2"
				shift
				;;
			--png-path=*)
				_arg_png_path="${_key##--png-path=}"
				;;
			-p*)
				_arg_png_path="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'zoom-link'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_zoom_link "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# see https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script

rm -rf "OpenZoomRoom.app"

temp_file=$(mktemp)
trap "rm -f $temp_file" EXIT # listen to these signals and rm temp file if caught/trapped
cat open_zoom_script.ascpt >> $temp_file

# see https://stackoverflow.com/questions/29081799/sed-1-invalid-command-code-f
pattern="s,LINKLOC,\"$_arg_zoom_link\","
sed -i '' $pattern $temp_file

osacompile -o OpenZoomRoom.app $temp_file

temp_dir=$(mktemp -d)
trap "rm -rf $temp_dir" EXIT # listen to these signals and rm temp file if caught/trapped
icns_path="$temp_dir/output.iconset"
mkdir -p $icns_path

# the convert command comes from imagemagick
for size in 16 32 64 128 256; do
  half="$(($size / 2))"
  convert $_arg_png_path -resize x$size $icns_path/icon_${size}x${size}.png
  convert $_arg_png_path -resize x$size $icns_path/icon_${half}x${half}@2x.png
done

iconutil -c icns $icns_path

cp -f "$temp_dir/output.icns" "OpenZoomRoom.app/Contents/Resources/applet.icns"

# ] <-- needed because of Argbash
